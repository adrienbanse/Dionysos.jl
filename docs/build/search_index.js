var documenterSearchIndex = {"docs":
[{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"EditURL = \"<unknown>/docs/src/examples/Path planning 2.jl\"","category":"page"},{"location":"generated/Path Planning 2.html#Example:-Path-planning-problem","page":"Path Planning 2","title":"Example: Path planning problem","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"(Image: Binder) (Image: nbviewer)","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"This example was borrowed from [1, IX. Examples, A] whose dynamics comes from the model given in [2, Ch. 2.4]. This is a reachability problem for a continuous system.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Let us consider the 3-dimensional state space control system of the form","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"dotx = f(x u)","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"with f mathbbR^3  U  mathbbR^3 given by","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"f(x(u_1u_2)) = beginbmatrix u_1 cos(α+x_3)cos(α^-1)  u_1 sin(α+x_3)cos(α^-1)  u_1 tan(u_2)  endbmatrix","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"and with U = 1 1 times 1 1 and α = arctan(tan(u_2)2). Here, (x_1 x_2) is the position and x_3 is the orientation of the vehicle in the 2-dimensional plane. The control inputs u_1 and u_2 are the rear wheel velocity and the steering angle. The control objective is to drive the vehicle which is situated in a maze made of obstacles from an initial position to a target position.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"In order to study the concrete system and its symbolic abstraction in a unified framework, we will solve the problem for the sampled system with a sampling time tau.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"The abstraction is based on a feedback refinment relation [1,V.2 Definition]. Basically, this is equivalent to an alternating simulation relationship with the additional constraint that the input of the concrete and symbolic system preserving the relation must be identical. This allows to easily determine the controller of the concrete system from the abstraction controller by simply adding a quantization step.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"For the construction of the relations in the abstraction, it is necessary to over-approximate attainable sets of a particular cell. In this example, we consider the used of a growth bound function  [1, VIII.2, VIII.5] which is one of the possible methods to over-approximate attainable sets of a particular cell based on the state reach by its center. Therefore, it is used to compute the relations in the abstraction based on the feedback refinement relation.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"For this reachability problem, the abstraction controller is built by solving a fixed-point equation which consists in computing the the pre-image of the target set.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"First, let us import StaticArrays.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"using StaticArrays","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"At this point, we import the useful Dionysos sub-module for this problem: Abstraction.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"using Dionysos\nconst DI = Dionysos\nconst UT = DI.Utils\nconst DO = DI.Domain\nconst ST = DI.System\nconst CO = DI.Control\nconst SY = DI.Symbolic","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"And the file defining the hybrid system for this problem","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"include(joinpath(dirname(dirname(pathof(Dionysos))), \"problems\", \"PathPlanning.jl\"))","category":"page"},{"location":"generated/Path Planning 2.html#Definition-of-the-problem","page":"Path Planning 2","title":"Definition of the problem","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Now we instantiate the problem using the function provided by PathPlanning.jl","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"problem = PathPlanning.problem();\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"F_sys is the function, _X_ the state domain and _U_ the input domain","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"F_sys = problem.system.f;\n_X_ = problem.system.X;\n_U_ = problem.system.U;\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"We define the growth bound function of f:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"ngrowthbound = 5;\nfunction L_growthbound(u)\n    β = abs(u[1]/cos(atan(tan(u[2])/2)))\n    return SMatrix{3,3}(\n        0.0, 0.0, 0.0,\n        0.0, 0.0, 0.0,\n        β, β, 0.0)\nend;\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Here it is considered that there is no system and measurement noise:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"sysnoise = SVector(0.0, 0.0, 0.0);\nmeasnoise = SVector(0.0, 0.0, 0.0);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"We define the discretization time step parameters: tstep and nsys:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"tstep = 0.3;\nnsys = 5;\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Finally, we build the control system:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"contsys = ST.NewControlSystemGrowthRK4(tstep, F_sys, L_growthbound, sysnoise,\n                                       measnoise, nsys, ngrowthbound);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html#Definition-of-the-abstraction","page":"Path Planning 2","title":"Definition of the abstraction","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Definition of the grid of the state-space on which the abstraction is based (origin x0 and state-space discretization h):","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"x0 = SVector(0.0, 0.0, 0.0);\nh = SVector(0.2, 0.2, 0.2);\nXgrid = DO.GridFree(x0, h);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Construction of the struct DomainList containing the feasible cells of the state-space:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Xfull = DO.DomainList(Xgrid);\nDO.add_set!(Xfull, _X_, DO.OUTER);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Definition of the grid of the input-space on which the abstraction is based (origin u0 and input-space discretization h):","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"u0 = SVector(0.0, 0.0);\nh = SVector(0.3, 0.3);\nUgrid = DO.GridFree(u0, h);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Construction of the struct DomainList containing the quantized inputs:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Ufull = DO.DomainList(Ugrid);\nDO.add_set!(Ufull, _U_, DO.OUTER);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Construction of the abstraction:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"symmodel = SY.NewSymbolicModelListList(Xfull, Ufull);\n@time SY.compute_symmodel_from_controlsystem!(symmodel, contsys)","category":"page"},{"location":"generated/Path Planning 2.html#Construction-of-the-controller","page":"Path Planning 2","title":"Construction of the controller","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"_I_ is the initial state domain and _T_ is the target state domain","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"_I_ = problem.initial_set;\n_T_ = problem.target_set;\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Computation of the initial symbolic states:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Xinit = DO.DomainList(Xgrid);\nDO.add_subset!(Xinit, Xfull, _I_, DO.OUTER)\ninitlist = [SY.get_state_by_xpos(symmodel, pos) for pos in DO.enum_pos(Xinit)];\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Computation of the target symbolic states:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Xtarget = DO.DomainList(Xgrid)\nDO.add_subset!(Xtarget, Xfull, _T_, DO.OUTER)\ntargetlist = [SY.get_state_by_xpos(symmodel, pos) for pos in DO.enum_pos(Xtarget)];\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Construction of the controller:","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"contr = CO.NewControllerList();\n@time CO.compute_controller_reach!(contr, symmodel.autom, initlist, targetlist)","category":"page"},{"location":"generated/Path Planning 2.html#Trajectory-display","page":"Path Planning 2","title":"Trajectory display","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"We choose the number of steps nsteps for the sampled system, i.e. the total elapsed time: nstep*tstep as well as the true initial state x0 which is contained in the initial state-space _I_ defined previously.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"nstep = 100;\nx0 = SVector(0.4, 0.4, 0.0);\nnothing #hide","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"Here we display the coordinate projection on the two first components of the state space along the trajectory.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"To complete","category":"page"},{"location":"generated/Path Planning 2.html#References","page":"Path Planning 2","title":"References","text":"","category":"section"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"G. Reissig, A. Weber and M. Rungger, \"Feedback Refinement Relations for the Synthesis of Symbolic Controllers,\" in IEEE Transactions on Automatic Control, vol. 62, no. 4, pp. 1781-1796.\nK. J. Aström and R. M. Murray, Feedback systems. Princeton University Press, Princeton, NJ, 2008.","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"","category":"page"},{"location":"generated/Path Planning 2.html","page":"Path Planning 2","title":"Path Planning 2","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Dionysos","page":"Index","title":"Dionysos","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Dionysos implements a solver for the optimal control of cyber-physical systems.","category":"page"}]
}
